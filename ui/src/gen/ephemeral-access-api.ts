/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Ephemeral Access API
 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export type ListAccessRequestResponseBodyItems = AccessRequestResponseBody[] | null;

export interface ListAccessRequestResponseBody {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  items: ListAccessRequestResponseBodyItems;
}

export interface ErrorDetail {
  /** Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
  location?: string;
  /** Error message text */
  message?: string;
  /** The value at the given location */
  value?: unknown;
}

/**
 * Optional list of individual error details
 */
export type ErrorModelErrors = ErrorDetail[] | null;

export interface ErrorModel {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  /** A human-readable explanation specific to this occurrence of the problem. */
  detail?: string;
  /** Optional list of individual error details */
  errors?: ErrorModelErrors;
  /** A URI reference that identifies the specific occurrence of the problem. */
  instance?: string;
  /** HTTP status code */
  status?: number;
  /** A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
  title?: string;
  /** A URI reference to human-readable documentation for the error. */
  type?: string;
}

export interface CreateAccessRequestBody {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  /** The role template name to request. */
  roleName: string;
}

/**
 * The current access request status.
 */
export type AccessRequestResponseBodyStatus =
  (typeof AccessRequestResponseBodyStatus)[keyof typeof AccessRequestResponseBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccessRequestResponseBodyStatus = {
  REQUESTED: 'REQUESTED',
  GRANTED: 'GRANTED',
  EXPIRED: 'EXPIRED',
  DENIED: 'DENIED',
  INVALID: 'INVALID'
} as const;

export interface AccessRequestResponseBody {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  /** The timestamp the access will expire (RFC3339 format). */
  expiresAt?: string;
  /** A human readeable description with details about the access request. */
  message?: string;
  /** The access request name. */
  name: string;
  /** The access request namespace. */
  namespace: string;
  /** The permission description of the role associated to this access request. */
  permission: string;
  /** The timestamp the access was requested (RFC3339 format). */
  requestedAt?: string;
  /** The role template associated to this access request. */
  role: string;
  /** The current access request status. */
  status?: AccessRequestResponseBodyStatus;
  /** The user associated with the access request. */
  username: string;
}

/**
 * Will retrieve an ordered list of access requests for the given context
 * @summary List AccessRequests
 */
export const listAccessrequest = <TData = AxiosResponse<ListAccessRequestResponseBody>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  console.log('listAccessrequest')
  return axios.get(`/accessrequests`, options);
};

/**
 * Will create an access request for the given role and context
 * @summary Create AccessRequest
 */
export const createAccessrequest = <TData = AxiosResponse<AccessRequestResponseBody>>(
  createAccessRequestBody: NonReadonly<CreateAccessRequestBody>,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/accessrequests`, createAccessRequestBody, options);
};

export type ListAccessrequestResult = AxiosResponse<ListAccessRequestResponseBody>;
export type CreateAccessrequestResult = AxiosResponse<AccessRequestResponseBody>;
