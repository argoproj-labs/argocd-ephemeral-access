// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockControllerConfigurer is an autogenerated mock type for the ControllerConfigurer type
type MockControllerConfigurer struct {
	mock.Mock
}

type MockControllerConfigurer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControllerConfigurer) EXPECT() *MockControllerConfigurer_Expecter {
	return &MockControllerConfigurer_Expecter{mock: &_m.Mock}
}

// ControllerAccessRequestTTL provides a mock function with no fields
func (_m *MockControllerConfigurer) ControllerAccessRequestTTL() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ControllerAccessRequestTTL")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockControllerConfigurer_ControllerAccessRequestTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerAccessRequestTTL'
type MockControllerConfigurer_ControllerAccessRequestTTL_Call struct {
	*mock.Call
}

// ControllerAccessRequestTTL is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) ControllerAccessRequestTTL() *MockControllerConfigurer_ControllerAccessRequestTTL_Call {
	return &MockControllerConfigurer_ControllerAccessRequestTTL_Call{Call: _e.mock.On("ControllerAccessRequestTTL")}
}

func (_c *MockControllerConfigurer_ControllerAccessRequestTTL_Call) Run(run func()) *MockControllerConfigurer_ControllerAccessRequestTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_ControllerAccessRequestTTL_Call) Return(_a0 time.Duration) *MockControllerConfigurer_ControllerAccessRequestTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_ControllerAccessRequestTTL_Call) RunAndReturn(run func() time.Duration) *MockControllerConfigurer_ControllerAccessRequestTTL_Call {
	_c.Call.Return(run)
	return _c
}

// ControllerEnableHTTP2 provides a mock function with no fields
func (_m *MockControllerConfigurer) ControllerEnableHTTP2() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ControllerEnableHTTP2")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockControllerConfigurer_ControllerEnableHTTP2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerEnableHTTP2'
type MockControllerConfigurer_ControllerEnableHTTP2_Call struct {
	*mock.Call
}

// ControllerEnableHTTP2 is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) ControllerEnableHTTP2() *MockControllerConfigurer_ControllerEnableHTTP2_Call {
	return &MockControllerConfigurer_ControllerEnableHTTP2_Call{Call: _e.mock.On("ControllerEnableHTTP2")}
}

func (_c *MockControllerConfigurer_ControllerEnableHTTP2_Call) Run(run func()) *MockControllerConfigurer_ControllerEnableHTTP2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_ControllerEnableHTTP2_Call) Return(_a0 bool) *MockControllerConfigurer_ControllerEnableHTTP2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_ControllerEnableHTTP2_Call) RunAndReturn(run func() bool) *MockControllerConfigurer_ControllerEnableHTTP2_Call {
	_c.Call.Return(run)
	return _c
}

// ControllerHealthProbeAddr provides a mock function with no fields
func (_m *MockControllerConfigurer) ControllerHealthProbeAddr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ControllerHealthProbeAddr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockControllerConfigurer_ControllerHealthProbeAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerHealthProbeAddr'
type MockControllerConfigurer_ControllerHealthProbeAddr_Call struct {
	*mock.Call
}

// ControllerHealthProbeAddr is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) ControllerHealthProbeAddr() *MockControllerConfigurer_ControllerHealthProbeAddr_Call {
	return &MockControllerConfigurer_ControllerHealthProbeAddr_Call{Call: _e.mock.On("ControllerHealthProbeAddr")}
}

func (_c *MockControllerConfigurer_ControllerHealthProbeAddr_Call) Run(run func()) *MockControllerConfigurer_ControllerHealthProbeAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_ControllerHealthProbeAddr_Call) Return(_a0 string) *MockControllerConfigurer_ControllerHealthProbeAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_ControllerHealthProbeAddr_Call) RunAndReturn(run func() string) *MockControllerConfigurer_ControllerHealthProbeAddr_Call {
	_c.Call.Return(run)
	return _c
}

// ControllerPort provides a mock function with no fields
func (_m *MockControllerConfigurer) ControllerPort() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ControllerPort")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockControllerConfigurer_ControllerPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerPort'
type MockControllerConfigurer_ControllerPort_Call struct {
	*mock.Call
}

// ControllerPort is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) ControllerPort() *MockControllerConfigurer_ControllerPort_Call {
	return &MockControllerConfigurer_ControllerPort_Call{Call: _e.mock.On("ControllerPort")}
}

func (_c *MockControllerConfigurer_ControllerPort_Call) Run(run func()) *MockControllerConfigurer_ControllerPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_ControllerPort_Call) Return(_a0 int) *MockControllerConfigurer_ControllerPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_ControllerPort_Call) RunAndReturn(run func() int) *MockControllerConfigurer_ControllerPort_Call {
	_c.Call.Return(run)
	return _c
}

// ControllerRequestTimeout provides a mock function with no fields
func (_m *MockControllerConfigurer) ControllerRequestTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ControllerRequestTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockControllerConfigurer_ControllerRequestTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerRequestTimeout'
type MockControllerConfigurer_ControllerRequestTimeout_Call struct {
	*mock.Call
}

// ControllerRequestTimeout is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) ControllerRequestTimeout() *MockControllerConfigurer_ControllerRequestTimeout_Call {
	return &MockControllerConfigurer_ControllerRequestTimeout_Call{Call: _e.mock.On("ControllerRequestTimeout")}
}

func (_c *MockControllerConfigurer_ControllerRequestTimeout_Call) Run(run func()) *MockControllerConfigurer_ControllerRequestTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_ControllerRequestTimeout_Call) Return(_a0 time.Duration) *MockControllerConfigurer_ControllerRequestTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_ControllerRequestTimeout_Call) RunAndReturn(run func() time.Duration) *MockControllerConfigurer_ControllerRequestTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// ControllerRequeueInterval provides a mock function with no fields
func (_m *MockControllerConfigurer) ControllerRequeueInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ControllerRequeueInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockControllerConfigurer_ControllerRequeueInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerRequeueInterval'
type MockControllerConfigurer_ControllerRequeueInterval_Call struct {
	*mock.Call
}

// ControllerRequeueInterval is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) ControllerRequeueInterval() *MockControllerConfigurer_ControllerRequeueInterval_Call {
	return &MockControllerConfigurer_ControllerRequeueInterval_Call{Call: _e.mock.On("ControllerRequeueInterval")}
}

func (_c *MockControllerConfigurer_ControllerRequeueInterval_Call) Run(run func()) *MockControllerConfigurer_ControllerRequeueInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_ControllerRequeueInterval_Call) Return(_a0 time.Duration) *MockControllerConfigurer_ControllerRequeueInterval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_ControllerRequeueInterval_Call) RunAndReturn(run func() time.Duration) *MockControllerConfigurer_ControllerRequeueInterval_Call {
	_c.Call.Return(run)
	return _c
}

// EnableLeaderElection provides a mock function with no fields
func (_m *MockControllerConfigurer) EnableLeaderElection() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableLeaderElection")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockControllerConfigurer_EnableLeaderElection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableLeaderElection'
type MockControllerConfigurer_EnableLeaderElection_Call struct {
	*mock.Call
}

// EnableLeaderElection is a helper method to define mock.On call
func (_e *MockControllerConfigurer_Expecter) EnableLeaderElection() *MockControllerConfigurer_EnableLeaderElection_Call {
	return &MockControllerConfigurer_EnableLeaderElection_Call{Call: _e.mock.On("EnableLeaderElection")}
}

func (_c *MockControllerConfigurer_EnableLeaderElection_Call) Run(run func()) *MockControllerConfigurer_EnableLeaderElection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllerConfigurer_EnableLeaderElection_Call) Return(_a0 bool) *MockControllerConfigurer_EnableLeaderElection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControllerConfigurer_EnableLeaderElection_Call) RunAndReturn(run func() bool) *MockControllerConfigurer_EnableLeaderElection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockControllerConfigurer creates a new instance of MockControllerConfigurer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControllerConfigurer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControllerConfigurer {
	mock := &MockControllerConfigurer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
