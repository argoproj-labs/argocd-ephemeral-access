// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockLogConfigurer is an autogenerated mock type for the LogConfigurer type
type MockLogConfigurer struct {
	mock.Mock
}

type MockLogConfigurer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogConfigurer) EXPECT() *MockLogConfigurer_Expecter {
	return &MockLogConfigurer_Expecter{mock: &_m.Mock}
}

// LogFormat provides a mock function with given fields:
func (_m *MockLogConfigurer) LogFormat() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogFormat")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLogConfigurer_LogFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogFormat'
type MockLogConfigurer_LogFormat_Call struct {
	*mock.Call
}

// LogFormat is a helper method to define mock.On call
func (_e *MockLogConfigurer_Expecter) LogFormat() *MockLogConfigurer_LogFormat_Call {
	return &MockLogConfigurer_LogFormat_Call{Call: _e.mock.On("LogFormat")}
}

func (_c *MockLogConfigurer_LogFormat_Call) Run(run func()) *MockLogConfigurer_LogFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogConfigurer_LogFormat_Call) Return(_a0 string) *MockLogConfigurer_LogFormat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogConfigurer_LogFormat_Call) RunAndReturn(run func() string) *MockLogConfigurer_LogFormat_Call {
	_c.Call.Return(run)
	return _c
}

// LogLevel provides a mock function with given fields:
func (_m *MockLogConfigurer) LogLevel() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogLevel")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLogConfigurer_LogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogLevel'
type MockLogConfigurer_LogLevel_Call struct {
	*mock.Call
}

// LogLevel is a helper method to define mock.On call
func (_e *MockLogConfigurer_Expecter) LogLevel() *MockLogConfigurer_LogLevel_Call {
	return &MockLogConfigurer_LogLevel_Call{Call: _e.mock.On("LogLevel")}
}

func (_c *MockLogConfigurer_LogLevel_Call) Run(run func()) *MockLogConfigurer_LogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogConfigurer_LogLevel_Call) Return(_a0 string) *MockLogConfigurer_LogLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogConfigurer_LogLevel_Call) RunAndReturn(run func() string) *MockLogConfigurer_LogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogConfigurer creates a new instance of MockLogConfigurer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogConfigurer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogConfigurer {
	mock := &MockLogConfigurer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
