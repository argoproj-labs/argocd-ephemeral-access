// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/argoproj-labs/argocd-ephemeral-access/pkg/log"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(msg string, keysAndValues ...any) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_mock.Called(_ca...)
	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - keysAndValues ...any
func (_e *MockLogger_Expecter) Debug(msg interface{}, keysAndValues ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, keysAndValues...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(msg string, keysAndValues ...any)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(msg string, keysAndValues ...any)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(err error, msg string, keysAndValues ...any) {
	var _ca []interface{}
	_ca = append(_ca, err, msg)
	_ca = append(_ca, keysAndValues...)
	_mock.Called(_ca...)
	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
//   - msg string
//   - keysAndValues ...any
func (_e *MockLogger_Expecter) Error(err interface{}, msg interface{}, keysAndValues ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{err, msg}, keysAndValues...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(err error, msg string, keysAndValues ...any)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(err error, msg string, keysAndValues ...any)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(msg string, keysAndValues ...any) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_mock.Called(_ca...)
	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - keysAndValues ...any
func (_e *MockLogger_Expecter) Info(msg interface{}, keysAndValues ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, keysAndValues...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string, keysAndValues ...any)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(msg string, keysAndValues ...any)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// WithValues provides a mock function for the type MockLogger
func (_mock *MockLogger) WithValues(keysAndValues ...any) *log.LogWrapper {
	var _ca []interface{}
	_ca = append(_ca, keysAndValues...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithValues")
	}

	var r0 *log.LogWrapper
	if returnFunc, ok := ret.Get(0).(func(...any) *log.LogWrapper); ok {
		r0 = returnFunc(keysAndValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.LogWrapper)
		}
	}
	return r0
}

// MockLogger_WithValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithValues'
type MockLogger_WithValues_Call struct {
	*mock.Call
}

// WithValues is a helper method to define mock.On call
//   - keysAndValues ...any
func (_e *MockLogger_Expecter) WithValues(keysAndValues ...interface{}) *MockLogger_WithValues_Call {
	return &MockLogger_WithValues_Call{Call: _e.mock.On("WithValues",
		append([]interface{}{}, keysAndValues...)...)}
}

func (_c *MockLogger_WithValues_Call) Run(run func(keysAndValues ...any)) *MockLogger_WithValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []any
		variadicArgs := make([]any, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockLogger_WithValues_Call) Return(logWrapper *log.LogWrapper) *MockLogger_WithValues_Call {
	_c.Call.Return(logWrapper)
	return _c
}

func (_c *MockLogger_WithValues_Call) RunAndReturn(run func(keysAndValues ...any) *log.LogWrapper) *MockLogger_WithValues_Call {
	_c.Call.Return(run)
	return _c
}
